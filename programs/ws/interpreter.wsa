# Array start addresses
@define INSTR_STACK_START 100
@define STACK_START 2000
@define HEAP_START 2200
@define CALL_STACK_START 2400
@define LABELS_START 2600

# Addresses of variables
@define INSTR_STACK_PTR 1
@define INSTR_STACK_END 2
@define STACK_TOP 3
@define HEAP_TOP 4
@define CALL_STACK_TOP 5
@define LABELS_TOP 6

# Instruction enum

@define INSTR_PUSH 1
@define INSTR_DUP 2
@define INSTR_COPY 3
@define INSTR_SWAP 4
@define INSTR_DROP 5
@define INSTR_SLIDE 6

@define INSTR_ADD 7
@define INSTR_SUB 8
@define INSTR_MUL 9
@define INSTR_DIV 10
@define INSTR_MOD 11

@define INSTR_STORE 12
@define INSTR_RETRIEVE 13

@define INSTR_LABEL 14
@define INSTR_CALL 15
@define INSTR_JMP 16
@define INSTR_JZ 17
@define INSTR_JN 18
@define INSTR_RET 19
@define INSTR_END 20

@define INSTR_PRINTC 21
@define INSTR_PRINTI 22
@define INSTR_READC 23
@define INSTR_READI 24

    # Init variables

    push INSTR_STACK_PTR
    push INSTR_STACK_START
    store

    push INSTR_STACK_END
    push INSTR_STACK_START
    store

    push STACK_TOP
    push STACK_START
    store

    push HEAP_TOP
    push HEAP_START
    store

    push CALL_STACK_TOP
    push CALL_STACK_START
    store

    push LABELS_TOP
    push LABELS_START
    store

@ifdef DEBUG
    @define debug_print(str) push str; call print_string
@else
    @define debug_print(str)
@endif

@include "parse.wsa"
@include "load-program.wsa"
@include "interpret.wsa"
