# Press ^D to exit input

.parse_loop:
    call parse
    jmp .parse_loop

parse:
    call read_char

    dup; push ' ';  sub; jz parse_stack  # Stack Manipulation
    dup; push '\t'; sub; jz .parse_tab   # Arithmetic, Heap Access, or I/O
    dup; push '\n'; sub; jz parse_flow   # Flow Control

    jmp parse

.parse_tab:
    call read_char

    dup; push ' ';  sub; jz parse_arith  # Arithmetic
    dup; push '\t'; sub; jz parse_heap   # Heap Access
    dup; push '\n'; sub; jz parse_io     # I/O

    jmp .parse_tab

parse_stack:
    call read_char

    dup; push ' ';  sub; jz instr_push        # push
    dup; push '\t'; sub; jz .parse_stack_tab  # copy, slide, or invalid instruction
    dup; push '\n'; sub; jz .parse_stack_lf   # dup, swap, or drop

    jmp parse_stack

.parse_stack_tab:
    call read_char

    dup; push ' ';  sub; jz instr_copy     # copy
    dup; push '\t'; sub; jz invalid_instr  # invalid instruction
    dup; push '\n'; sub; jz instr_slide    # slide

    jmp .parse_stack_tab

.parse_stack_lf:
    call read_char

    dup; push ' ';  sub; jz instr_dup   # dup
    dup; push '\t'; sub; jz instr_swap  # swap
    dup; push '\n'; sub; jz instr_drop  # drop

    jmp .parse_stack_lf

parse_arith:
    call read_char

    dup; push ' ';  sub; jz .parse_arith_space  # add, sub, or mul
    dup; push '\t'; sub; jz .parse_arith_tab    # div, mod, or invalid instruction
    dup; push '\n'; sub; jz invalid_instr       # invalid instruction

    jmp parse_arith

.parse_arith_space:
    call read_char

    dup; push ' ';  sub; jz instr_add  # add
    dup; push '\t'; sub; jz instr_sub  # sub
    dup; push '\n'; sub; jz instr_mul  # mul

    jmp .parse_arith_space

.parse_arith_tab:
    call read_char

    dup; push ' ';  sub; jz instr_div       # div
    dup; push '\t'; sub; jz instr_mod       # mod
    dup; push '\n'; sub; jz .invalid_instr  # invalid instruction

    jmp .parse_arith_tab

parse_heap:
    call read_char

    dup; push ' ';  sub; jz instr_store     # store
    dup; push '\t'; sub; jz instr_retrieve  # retrieve
    dup; push '\n'; sub; jz invalid_instr   # invalid instruction

    jmp parse_heap

parse_flow:
    call read_char

    dup; push ' ';  sub; jz .parse_flow_space  # label, call, or jump
    dup; push '\t'; sub; jz .parse_flow_tab    # jz, jn, or ret
    dup; push '\n'; sub; jz .parse_flow_lf     # end or invalid instruction

    jmp parse_flow

.parse_flow_space:
    call read_char

    dup; push ' ';  sub; jz instr_label  # label
    dup; push '\t'; sub; jz instr_call   # call
    dup; push '\n'; sub; jz instr_jmp    # jmp

    jmp .parse_flow_space

.parse_flow_tab:
    call read_char

    dup; push ' ';  sub; jz instr_jz   # jz
    dup; push '\t'; sub; jz instr_jn   # jn
    dup; push '\n'; sub; jz instr_ret  # ret

    jmp .parse_flow_tab

.parse_flow_lf:
    call read_char

    dup; push ' ';  sub; jz invalid_instr  # invalid instruction
    dup; push '\t'; sub; jz invalid_instr  # invalid instruction
    dup; push '\n'; sub; jz instr_end      # end

    jmp .parse_flow_lf

parse_io:
    call read_char

    dup; push ' ';  sub; jz .parse_io_space  # printc, printi, or invalid
    dup; push '\t'; sub; jz .parse_io_tab    # readc, readi, or invalid
    dup; push '\n'; sub; jz invalid_instr    # invalid instruction

    jmp parse_io

.parse_io_space:
    call read_char

    dup; push ' ';  sub; jz instr_printc   # printc
    dup; push '\t'; sub; jz instr_printi   # printi
    dup; push '\n'; sub; jz invalid_instr  # invalid instruction

    jmp .parse_io_space

.parse_io_tab:
    call read_char

    dup; push ' ';  sub; jz instr_readc    # readc
    dup; push '\t'; sub; jz instr_readi    # readi
    dup; push '\n'; sub; jz invalid_instr  # invalid instruction

    jmp .parse_io_tab

read_char:
    drop
    push 0
    dup
    readc
    retrieve

    # Check for NUL and exit input
    dup
    jz .read_char_end
    ret
.read_char_end:
    drop
    call parse_end

read_integer:
    call read_char

    dup; push ' ';  sub; jz read_unsigned           # positive integer
    dup; push '\t'; sub; jz .read_integer_negative  # negative integer
    dup; push '\n'; sub; jz .read_integer_zero      # zero

    jmp read_integer

.read_integer_negative:
    call read_unsigned
    push -1
    mul
    ret

.read_integer_zero:
    push 0
    ret

read_unsigned:
    push 0

.read_unsigned_loop:
    swap
    call read_char

    dup; push ' ';  sub; jz .read_unsigned_0    # insert 0 into integer
    dup; push '\t'; sub; jz .read_unsigned_1    # insert 1 into integer
    dup; push '\n'; sub; jz .read_unsigned_end  # terminate integer

    swap
    jmp .read_unsigned_loop

.read_unsigned_0:
    swap
    push 2
    mul
    jmp .read_unsigned_loop

.read_unsigned_1:
    swap
    push 2
    mul
    push 1
    add
    jmp .read_unsigned_loop

.read_unsigned_end:
    swap
    ret
