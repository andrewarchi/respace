parse_complete:
    # Reset stack pointer
    push INSTR_STACK_PTR
    push INSTR_STACK_START
    store

    debug_print("\nInterpret:\n")

interpret_loop:
    push INSTR_STACK_PTR
    dup
    retrieve
    dup
    retrieve

    dup; push INSTR_PUSH;   sub; jz interpret_push
    dup; push INSTR_DUP;    sub; jz interpret_dup
    dup; push INSTR_COPY;   sub; jz interpret_copy
    dup; push INSTR_SWAP;   sub; jz interpret_swap
    dup; push INSTR_DROP;   sub; jz interpret_drop
    dup; push INSTR_SLIDE;  sub; jz interpret_slide

    dup; push INSTR_ADD;    sub; jz interpret_add
    dup; push INSTR_SUB;    sub; jz interpret_sub
    dup; push INSTR_MUL;    sub; jz interpret_mul
    dup; push INSTR_DIV;    sub; jz interpret_div
    dup; push INSTR_MOD;    sub; jz interpret_mod

    dup; push INSTR_STORE;  sub; jz interpret_store
    dup; push INSTR_RETRIEVE; sub; jz interpret_retrieve

    dup; push INSTR_LABEL;  sub; jz interpret_label
    dup; push INSTR_CALL;   sub; jz interpret_call
    dup; push INSTR_JMP;    sub; jz interpret_jmp
    dup; push INSTR_JZ;     sub; jz interpret_jz
    dup; push INSTR_JN;     sub; jz interpret_jn
    dup; push INSTR_RET;    sub; jz interpret_ret
    dup; push INSTR_END;    sub; jz interpret_end
    dup; push INSTR_PRINTC; sub; jz interpret_printc
    dup; push INSTR_PRINTI; sub; jz interpret_printi

    dup; push INSTR_READC;  sub; jz interpret_readc
    dup; push INSTR_READI;  sub; jz interpret_readi

    drop
    push "No instruction matched.\n"
    call print_string

.interpret_loop_footer:
    # Increment instruction pointer
    push 2
    add
    store

    jmp interpret_loop

# Get stack top pointer
get_stack_top_ptr:
    push STACK_TOP
    dup
    retrieve
    dup
    ret

# Get top value on stack
get_stack_one:
    call check_stack_underflow
    dup
    push 1
    sub
    retrieve
    ret

# Get top two values on stack
get_stack_two:
    call check_stack_underflow_two
    dup; push 1; sub
    dup; push 1; sub
    retrieve
    swap
    retrieve
    ret

# Increment stack top pointer
increment_stack:
    push 1
    add
    store

    jmp .interpret_loop_footer

# Decrement stack top pointer
decrement_stack:
    # Should have been checked earlier
    # call check_stack_underflow
    push 1
    sub
    store

    jmp .interpret_loop_footer

# TODO: Check for stack underflow
check_stack_underflow:
check_stack_underflow_two:
    # If underflow: jmp .interpret_loop_footer
    ret

interpret_push:
    debug_print("push,")
    drop
    call get_stack_top_ptr

    # Get integer for push
    copy 3
    push 1
    add
    retrieve
    store

    jmp increment_stack

interpret_dup:
    debug_print("dup,")
    drop
    call get_stack_top_ptr
    call get_stack_one
    store
    jmp increment_stack

interpret_copy:
    debug_print("copy,")
    drop
    jmp .interpret_loop_footer

interpret_swap:
    debug_print("swap,")
    drop
    jmp .interpret_loop_footer

interpret_drop:
    debug_print("drop,")
    drop
    call check_stack_underflow

    # Get stack top pointer
    push STACK_TOP
    dup
    retrieve

    jmp decrement_stack

interpret_slide:
    debug_print("slide,")
    drop
    jmp .interpret_loop_footer

interpret_add:
    debug_print("add,")
    drop
    call get_stack_top_ptr
    call get_stack_two
    add
    store
    jmp decrement_stack

interpret_sub:
    debug_print("sub,")
    drop
    call get_stack_top_ptr
    call get_stack_two
    sub
    store
    jmp decrement_stack

interpret_mul:
    debug_print("mul,")
    drop
    call get_stack_top_ptr
    call get_stack_two
    mul
    store
    jmp decrement_stack

interpret_div:
    debug_print("div,")
    drop
    call get_stack_top_ptr
    call get_stack_two
    div
    store
    jmp decrement_stack

interpret_mod:
    debug_print("mod,")
    drop
    call get_stack_top_ptr
    call get_stack_two
    mod
    store
    jmp decrement_stack

interpret_store:
    debug_print("store,")
    drop
    jmp .interpret_loop_footer

interpret_retrieve:
    debug_print("retrieve,")
    drop
    call get_stack_top_ptr
    call get_stack_one
    push HEAP_START
    add

    # TODO: retrieve

    jmp decrement_stack

interpret_label:
    debug_print("label,")
    drop
    jmp .interpret_loop_footer

interpret_call:
    debug_print("call,")
    drop
    jmp .interpret_loop_footer

interpret_jmp:
    debug_print("jmp,")
    drop
    jmp .interpret_loop_footer

interpret_jz:
    debug_print("jz,")
    drop
    jmp .interpret_loop_footer

interpret_jn:
    debug_print("jn,")
    drop
    jmp .interpret_loop_footer

interpret_ret:
    debug_print("ret,")
    drop
    jmp .interpret_loop_footer

# TODO: cleanup stack
interpret_end:
    debug_print("end,")
    drop
    end

interpret_printc:
    debug_print("printc,")
    drop
    call get_stack_top_ptr
    call check_stack_underflow

    push 1
    sub
    retrieve
    printc

    jmp decrement_stack

interpret_printi:
    debug_print("printi,")
    drop
    call get_stack_top_ptr
    call check_stack_underflow

    push 1
    sub
    retrieve
    printi

    jmp decrement_stack

interpret_readc:
    debug_print("readc,")
    drop
    jmp .interpret_loop_footer

interpret_readi:
    debug_print("readi,")
    drop
    jmp .interpret_loop_footer
