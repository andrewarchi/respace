parse_end:
    # Reset stack pointer
    push INSTR_PTR
    push INSTR_STACK_START
    store

interpret_loop:
    push INSTR_PTR
    dup
    retrieve
    dup
    retrieve

    dup; push INSTR_PUSH;   sub; jz interpret_push
    dup; push INSTR_DUP;    sub; jz interpret_dup
    dup; push INSTR_COPY;   sub; jz interpret_copy
    dup; push INSTR_SWAP;   sub; jz interpret_swap
    dup; push INSTR_DROP;   sub; jz interpret_drop
    dup; push INSTR_SLIDE;  sub; jz interpret_slide

    dup; push INSTR_ADD;    sub; jz interpret_add
    dup; push INSTR_SUB;    sub; jz interpret_sub
    dup; push INSTR_MUL;    sub; jz interpret_mul
    dup; push INSTR_DIV;    sub; jz interpret_div
    dup; push INSTR_MOD;    sub; jz interpret_mod

    dup; push INSTR_STORE;  sub; jz interpret_store
    dup; push INSTR_RETRIEVE; sub; jz interpret_retrieve

    dup; push INSTR_LABEL;  sub; jz interpret_label
    dup; push INSTR_CALL;   sub; jz interpret_call
    dup; push INSTR_JMP;    sub; jz interpret_jmp
    dup; push INSTR_JZ;     sub; jz interpret_jz
    dup; push INSTR_JN;     sub; jz interpret_jn
    dup; push INSTR_RET;    sub; jz interpret_ret
    dup; push INSTR_END;    sub; jz interpret_end
    dup; push INSTR_PRINTC; sub; jz interpret_printc
    dup; push INSTR_PRINTI; sub; jz interpret_printi

    dup; push INSTR_READC;  sub; jz interpret_readc
    dup; push INSTR_READI;  sub; jz interpret_readi

    drop
    push "No instruction matched.\n"
    call print_string

.interpret_loop_footer:
    # Increment instruction pointer
    push 2
    add
    store

    jmp interpret_loop

interpret_push:
    drop
    call get_instr_integer

    push "PUSH,"; call print_string

    # Store in stack
    push STACK_TOP
    retrieve
    swap
    store

    jmp .interpret_loop_footer

interpret_dup:
    drop
    push "DUP,"; call print_string
    jmp .interpret_loop_footer

interpret_copy:
    drop
    push "COPY,"; call print_string
    jmp .interpret_loop_footer

interpret_swap:
    drop
    push "SWAP,"; call print_string
    jmp .interpret_loop_footer

interpret_drop:
    drop
    push "DROP,"; call print_string
    jmp .interpret_loop_footer

interpret_slide:
    drop
    push "SLIDE,"; call print_string
    jmp .interpret_loop_footer

interpret_add:
    drop
    push "ADD,"; call print_string
    jmp .interpret_loop_footer

interpret_sub:
    drop
    push "SUB,"; call print_string
    jmp .interpret_loop_footer

interpret_mul:
    drop
    push "MUL,"; call print_string
    jmp .interpret_loop_footer

interpret_div:
    drop
    push "DIV,"; call print_string
    jmp .interpret_loop_footer

interpret_mod:
    drop
    push "MOD,"; call print_string
    jmp .interpret_loop_footer

interpret_store:
    drop
    push "STORE,"; call print_string
    jmp .interpret_loop_footer

interpret_retrieve:
    drop
    push "RETRIEVE,"; call print_string
    jmp .interpret_loop_footer

interpret_label:
    drop
    push "LABEL,"; call print_string
    jmp .interpret_loop_footer

interpret_call:
    drop
    push "CALL,"; call print_string
    jmp .interpret_loop_footer

interpret_jmp:
    drop
    push "JMP,"; call print_string
    jmp .interpret_loop_footer

interpret_jz:
    drop
    push "JZ,"; call print_string
    jmp .interpret_loop_footer

interpret_jn:
    drop
    push "JN,"; call print_string
    jmp .interpret_loop_footer

interpret_ret:
    drop
    push "RET,"; call print_string
    jmp .interpret_loop_footer

# TODO: cleanup stack
interpret_end:
    drop
    push "END,"; call print_string
    end

interpret_printc:
    drop
    call get_instr_integer
    printc
    push "PRINTC,"; call print_string
    jmp .interpret_loop_footer

interpret_printi:
    drop
    call get_instr_integer
    printi
    push "PRINTI,"; call print_string
    jmp .interpret_loop_footer

interpret_readc:
    drop
    push "READC,"; call print_string
    jmp .interpret_loop_footer

interpret_readi:
    drop
    push "READI,"; call print_string
    jmp .interpret_loop_footer

# Retrieve integer to push
get_instr_integer:
    dup
    push 1
    add
    retrieve
    ret
