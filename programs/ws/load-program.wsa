# TODO: Should really be incrementing stack top
inc_instr_ptr:
    push INSTR_PTR
    dup
    retrieve
    push 2
    add
    store
    ret

load_instr:
    push INSTR_PTR
    retrieve
    swap
    store
    jmp inc_instr_ptr

load_instr_integer:
    push INSTR_PTR
    retrieve
    dup
    # Get the given instruction ID
    copy 2
    store
    push 1
    add
    swap
    call read_integer
    swap
    drop
    store
    # Push garbage because the read character will be discarded
    # push 99 # The argument works for this filler item now
    jmp inc_instr_ptr

load_instr_unsigned:
    push INSTR_PTR
    retrieve
    dup
    # Get the given instruction ID
    copy 2
    store
    push 1
    add
    swap
    call read_unsigned
    swap
    drop
    store
    # Push garbage because the read character will be discarded
    # push 99 # The argument works for this filler item now
    jmp inc_instr_ptr

instr_push:   debug_print("push,");   push INSTR_PUSH;   jmp load_instr_integer
instr_dup:    debug_print("dup,");    push INSTR_DUP;    jmp load_instr
instr_copy:   debug_print("copy,");   push INSTR_COPY;   jmp load_instr_integer
instr_swap:   debug_print("swap,");   push INSTR_SWAP;   jmp load_instr
instr_drop:   debug_print("drop,");   push INSTR_DROP;   jmp load_instr
instr_slide:  debug_print("slide,");  push INSTR_SLIDE;  jmp load_instr_integer

instr_add:    debug_print("add,");    push INSTR_ADD;    jmp load_instr
instr_sub:    debug_print("sub,");    push INSTR_SUB;    jmp load_instr
instr_mul:    debug_print("mul,");    push INSTR_MUL;    jmp load_instr
instr_div:    debug_print("div,");    push INSTR_DIV;    jmp load_instr
instr_mod:    debug_print("mod,");    push INSTR_MOD;    jmp load_instr

instr_store:  debug_print("store,");  push INSTR_STORE;  jmp load_instr
instr_retrieve: debug_print("retrieve,"); push INSTR_RETRIEVE; jmp load_instr

instr_label:  debug_print("label,");  push INSTR_LABEL;  jmp load_instr_unsigned
instr_call:   debug_print("call,");   push INSTR_CALL;   jmp load_instr_unsigned
instr_jmp:    debug_print("jmp,");    push INSTR_JMP;    jmp load_instr_unsigned
instr_jz:     debug_print("jz,");     push INSTR_JZ;     jmp load_instr_unsigned
instr_jn:     debug_print("jn,");     push INSTR_JN;     jmp load_instr_unsigned
instr_ret:    debug_print("ret,");    push INSTR_RET;    jmp load_instr
instr_end:    debug_print("end,");    push INSTR_END;    jmp load_instr

instr_printc: debug_print("printc,"); push INSTR_PRINTC; jmp load_instr
instr_printi: debug_print("printi,"); push INSTR_PRINTI; jmp load_instr
instr_readc:  debug_print("readc,");  push INSTR_READC;  jmp load_instr
instr_readi:  debug_print("readi,");  push INSTR_READI;  jmp load_instr

@include "../util/print-string.wsa"
